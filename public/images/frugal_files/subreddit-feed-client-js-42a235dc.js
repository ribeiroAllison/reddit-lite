import"./shreddit-feed-d5243b2a.js";import"./shreddit-post-translator-4f354fc9.js";import"./reddit-page-data-1779d0a5.js";import"./shreddit-share-list-item-93bcd0d1.js";import"./faceplate-hovercard-85f4faa4.js";import"./open-interstitial-modal-3bf5e36f.js";import"./confirm-over-18-fe3c049e.js";import{s as t,x as e,I as i,A as s,i as o,aI as a,bs as n,bt as r}from"./icon-732d0443.js";import"./faceplate-modal-af17da60.js";import"./faceplate-auto-height-animator-8e17faab.js";import"./guard-community-modal-3ed053b6.js";import{f as d,_ as c,t as p,e as l,a as u,q as m,n as b,c as h,b as f,l as y,ae as v,W as g,w as j,bX as S,r as $,L as x,a5 as C,eE as k,ex as E,eF as w}from"./shell-10899a6f.js";import{F as z}from"./index-8b2c7d5a.js";import"./faceplate-banner-dee2ed32.js";import"./faceplate-textarea-input-3e8a14df.js";import"./faceplate-text-input-acdf40f0.js";import"./faceplate-form-f06b1f21.js";import"./community-appearance-entrypoint-d8604f45.js";import"./user-mod-actions-bottom-sheet-2ef3ffa6.js";import"./community-status-bottom-sheet-0409a668.js";import"./protected-community-modal-trigger-53035ebd.js";import"./faceplate-shimmer-22c83a68.js";import{a as N}from"./community-highlight-card-565ed4c9.js";import{C as q}from"./feeds-ecfe2cbc.js";import{P as A}from"./postUpdate-754fb9c0.js";import"./create-post-entry-point-wrapper-19d951d6.js";import"./throttle-b6c85397.js";import"./index-8e84af25.js";import"./index-ff0f71e9.js";import"./translation-feedback-modal-f161d5d8.js";import"./translations-830bf5d1.js";import"./faceplate-bottom-sheet-f113e7a5.js";import"./TinyGesture-b7fb4b5e.js";import"./base-translator-30b45274.js";import"./index-f63336d1.js";import"./post-996da98d.js";import"./translation-intervention-modal-67340953.js";import"./with-share-894fcf25.js";import"./a-6aa09d2e.js";import"./content-action-button-2c6cb4ee.js";import"./list-item-c0043cac.js";import"./index-373c9660.js";import"./popper-controller-8ba8f4af.js";import"./makeEventDispatcher-0d7db2ea.js";import"./faceplate-tooltip-b2b6d871.js";import"./index-9c3b783f.js";import"./live-79249cef.js";import"./text-input-f66f9653.js";import"./form-common-utils-0a9272bf.js";import"./faceplate-input-6d2f4135.js";import"./input-element-6687ec6f.js";import"./faceplate-switch-input-11d7e644.js";import"./checked-input-element-9487863d.js";import"./shreddit-pubsub-publisher-002d2008.js";import"./faceplate-bottom-sheet-header-c25970a1.js";import"./faceplate-menu-f46e30dc.js";import"./user-mod-actions-ebb48fe5.js";import"./moderation-b382e6dc.js";import"./index-5d63ae01.js";import"./community-status-telemetry-644dd377.js";import"./modActions-460c452c.js";import"./subreddit-posting-eligibility-9874e282.js";const D=d(t);let I=class extends D{constructor(){super(...arguments),this.bannerEventData=null}static get styles(){return[u]}connectedCallback(){super.connectedCallback(),this.subscribe(m.TriggerFeedErrorBanner,(t=>{t.type===z.Show?this.bannerEventData=t.data??null:this.bannerEventData=null}))}render(){if(!this.bannerEventData)return"";const{multiLine:t,msg:i,appearance:s,shape:o,className:a,children:n}=this.bannerEventData;return e` <faceplate-banner \n class="${a}" \n ?multiLine="${t}" \n appearance="${s}" \n shape="${o}" \n msg="${i}" \n>\n ${n}\n </faceplate-banner>`}};c([p()],I.prototype,"bannerEventData",void 0),I=c([l("shreddit-feed-error-banner")],I);const M=d(t);let _=class extends M{constructor(){super(...arguments),this.name="",this.subredditId="",this.prefixedName="",this.notificationLevel="",this.isModerator=!1,this.hasModqueueAccess=!1,this.isSubscribed=!1,this.isMuted=!1,this.isFavorite=!1,this.isUserLoggedIn=!1,this.hasCustomActions=!1,this.buttonSize=h.Small,this.iconSize=i.Small,this.isCustomFeedEnabled=!1,this.onSubscriptionChange=t=>{this.name===t.name&&(this.isSubscribed=t.subscribed)}}static get styles(){return[u]}firstUpdated(){this.subscribe(m.SubredditSubscriptionChange,this.onSubscriptionChange)}disconnectedCallback(){super.disconnectedCallback(),this.unsubscribe(m.SubredditSubscriptionChange,this.onSubscriptionChange)}render(){return e` <div class="flex items-center gap-sm">\n ${this.isSubscribed?e`<shreddit-notification-frequency-control \n subreddit-id="${this.subredditId}" \n notification-level="${this.notificationLevel}" \n button-size="${this.buttonSize}" \n icon-size="${this.iconSize}" \n></shreddit-notification-frequency-control>`:s}\n ${this.isModerator?f({appearance:"primary",size:this.buttonSize,attributes:{href:this.hasModqueueAccess?`/mod/${this.name}/queue`:`/mod/${this.name}/insights`,className:"modtools-btn"},children:"Moderação"}):e`<faceplate-tracker \n source="community" \n action="click" \n noun="${this.isSubscribed?"unsubscribe":"subscribe"}" \n>\n <shreddit-join-button \n name="${this.name}" \n subreddit-id="${this.subredditId}" \n button-classes="px-sm py-xs" \n buttonsize="${this.buttonSize===h.Medium?"medium":"small"}" \n subscribe-label="Unir-se" \n unsubscribe-label="Membro" \n unsubscribe-button-type-override="bordered" \n ?subscribed="${this.isSubscribed}" \n></shreddit-join-button></faceplate-tracker>`}\n ${this.isUserLoggedIn||this.hasCustomActions?e`<shreddit-subreddit-overflow-control \n name="${this.name}" \n prefixed-name="${this.prefixedName}" \n subreddit-id="${this.subredditId}" \n button-size="${this.buttonSize}" \n icon-size="${this.iconSize}" \n ?is-muted="${this.isMuted}" \n ?is-favorite="${this.isFavorite}" \n ?subscribed="${this.isSubscribed}" \n ?show-join-button="${this.isModerator}" \n ?is-user-logged-in="${this.isUserLoggedIn}" \n ?allow-custom-feed="${this.isCustomFeedEnabled}" \n>\n <slot name="devvit-context-actions" slot="devvit-context-actions"></slot>\n </shreddit-subreddit-overflow-control>`:s}\n </div>`}};c([b({type:String})],_.prototype,"name",void 0),c([b({type:String,attribute:"subreddit-id"})],_.prototype,"subredditId",void 0),c([b({type:String,attribute:"prefixed-name"})],_.prototype,"prefixedName",void 0),c([b({type:String,attribute:"notification-level"})],_.prototype,"notificationLevel",void 0),c([b({type:Boolean,attribute:"is-moderator"})],_.prototype,"isModerator",void 0),c([b({type:Boolean,attribute:"modqueue-access"})],_.prototype,"hasModqueueAccess",void 0),c([b({type:Boolean,attribute:"is-subscribed"})],_.prototype,"isSubscribed",void 0),c([b({type:Boolean,attribute:"is-muted"})],_.prototype,"isMuted",void 0),c([b({type:Boolean,attribute:"is-favorite"})],_.prototype,"isFavorite",void 0),c([b({type:Boolean,attribute:"is-user-logged-in"})],_.prototype,"isUserLoggedIn",void 0),c([b({type:Boolean,attribute:"has-custom-actions"})],_.prototype,"hasCustomActions",void 0),c([b({type:String,attribute:"button-size"})],_.prototype,"buttonSize",void 0),c([b({type:String,attribute:"icon-size"})],_.prototype,"iconSize",void 0),c([b({type:Boolean,attribute:"allow-custom-feed"})],_.prototype,"isCustomFeedEnabled",void 0),_=c([l("shreddit-subreddit-header-buttons")],_);const B="community_highlights",L="collapse",P="expand";function U(t){return{subreddit:{name:t.subredditName},action_info:{page_type:v.Community}}}const F=g(t);let T=class extends F{constructor(){super(...arguments),this.subredditName="",this.feedViewType=S.ModQueueCompactView,this.isEditable=!1,this.isCollapsed=!1,this.pubSub=new $(this),this.viewedPosts=new Set,this.toggle=()=>{this.isCollapsed=!this.isCollapsed;const t=this.isCollapsed?(e={subredditName:this.subredditName},y({source:B,action:"click",noun:L},U(e))):(t=>y({source:B,action:"click",noun:P},U(t)))({subredditName:this.subredditName});var e;this.trackEvent(t)},this._reload=async()=>{if(!this.subredditName)return;const t=q.replace(":subredditName",this.subredditName),e=document.createElement("faceplate-partial");e.setAttribute("slot","content"),e.setAttribute("loading",x.Programmatic),e.setAttribute("src",t);const i=this.contentsSlot?.assignedElements({flatten:!0})||[];Array.from(i).forEach((t=>t.removeAttribute("slot"))),e.append(...i),this.appendChild(e),await e.load()},this._onPostUpdate=({action:t,postId:e})=>{if(t!==A.delete)return;this.querySelector(`community-highlight-card#${N(e)}`)&&this._reload()}}connectedCallback(){super.connectedCallback(),requestAnimationFrame((()=>{this.pubSub.subscribe(m.ReloadHighlights,this._reload),this.pubSub.subscribe(m.PostUpdated,this._onPostUpdate)}))}disconnectedCallback(){super.disconnectedCallback(),this.pubSub.unsubscribe(m.ReloadHighlights,this._reload),this.pubSub.unsubscribe(m.PostUpdated,this._onPostUpdate)}onTrack(t){if("post/view/post"!==t.SAN)return;const e=t.target instanceof HTMLElement?t.target.id:null;return e?this.viewedPosts.has(e)?(t.preventDefault(),void t.stopImmediatePropagation()):void this.viewedPosts.add(e):void 0}renderHeader(){const t=this.feedViewType===S.CompactView;return e`\n <button \n class="flex w-full bg-transparent hover:bg-neutral-background-hover border-none p-0 justify-between items-center cursor-pointer font-sans rounded-[12px] text-secondary-plain" \n aria-label="esconder/expandir os destaques da comunidade" \n @click="${this.toggle}" \n>\n <slot name="title"></slot>\n\n <div \n class="flex gap-sm py-2xs pr-md ${t?"xs:pr-2xs":""}" \n @click="${t=>t.stopPropagation()}" \n @keydown="${t=>t.stopPropagation()}" \n>\n ${this.isEditable?this.renderEditButton():""} ${this.renderCollapseButton()}\n </div>\n </button>\n `}renderEditButton(){return e`\n <activate-feature \n reactivatable\n render-mode="${C.Contents}" \n name="${k}" \n route-params="${JSON.stringify({subredditName:this.subredditName})}" \n activation="${x.Action}" \n>\n ${f({appearance:"secondary",size:h.ExtraSmall,leadingIcon:a({size:i.ExtraSmall}),attributes:{"aria-label":"Editar destaques da comunidade"}})}\n </activate-feature>\n `}renderCollapseButton(){return f({appearance:"plain",size:h.ExtraSmall,leadingIcon:this.isCollapsed?n({size:i.ExtraSmall}):r({size:i.ExtraSmall}),attributes:{"aria-label":"esconder/expandir os destaques da comunidade",onclick:this.toggle}})}render(){return e`\n ${this.renderHeader()}\n ${this.isCollapsed?"":e` <slot name="content" @faceplate-track="${this.onTrack}"></slot> `}\n `}};T.styles=[o`:host{display:block}`,u],c([b({type:String,attribute:"subreddit-name"})],T.prototype,"subredditName",void 0),c([b({type:String,attribute:"feed-view-type"})],T.prototype,"feedViewType",void 0),c([b({type:Boolean,attribute:"editable"})],T.prototype,"isEditable",void 0),c([p()],T.prototype,"isCollapsed",void 0),c([j('slot[name="content"]')],T.prototype,"contentsSlot",void 0),T=c([l("community-highlight-carousel")],T);let H=class extends(g(t)){constructor(){super(...arguments),this.country="",this.isDismissed=!1,this.handleDismiss=()=>{this.isDismissed=!0,E({country:this.country,name:w,value:"true"});const t=y({source:"chat_feed_upsell",action:"dismiss",noun:"chat_feed_upsell"});this.trackEvent(t)}}connectedCallback(){super.connectedCallback(),this.querySelector('[data-test-id="upsell-dismiss-button"]')?.addEventListener("click",this.handleDismiss)}disconnectedCallback(){super.disconnectedCallback(),this.querySelector('[data-test-id="upsell-dismiss-button"]')?.removeEventListener("click",this.handleDismiss)}render(){return this.isDismissed?s:e`<slot></slot>`}};c([b({type:String})],H.prototype,"country",void 0),c([p()],H.prototype,"isDismissed",void 0),H=c([l("subreddit-feed-channel-upsell")],H);
//# sourceMappingURL=subreddit-feed-client-js-42a235dc.js.map
